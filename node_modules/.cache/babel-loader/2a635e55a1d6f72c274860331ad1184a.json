{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getTypographyUtilityClass } from './typographyClasses';\n\nconst getTextColor = (color, palette) => {\n  if (color.indexOf('text') === 0) {\n    return palette.text[color.split('text').pop().toLowerCase()];\n  }\n\n  if (color === 'inherit' || color === 'initial') {\n    return color;\n  }\n\n  return palette[color].main;\n};\n\nconst overridesResolver = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  return deepmerge(styles.root || {}, _extends({}, styleProps.variant && styles[styleProps.variant], styleProps.color && styles[`color${capitalize(styleProps.color)}`], styleProps.align && styles[`align${capitalize(styleProps.align)}`], styleProps.display && styles[`display${capitalize(styleProps.display)}`], styleProps.noWrap && styles.noWrap, styleProps.gutterBottom && styles.gutterBottom, styleProps.paragraph && styles.paragraph));\n};\n\nexport const TypographyRoot = experimentalStyled('span', {}, {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  styleProps\n}) => _extends({\n  margin: 0\n}, styleProps.variant && theme.typography[styleProps.variant], styleProps.align !== 'inherit' && {\n  textAlign: styleProps.align\n}, styleProps.noWrap && {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}, styleProps.gutterBottom && {\n  marginBottom: '0.35em'\n}, styleProps.paragraph && {\n  marginBottom: 16\n}, styleProps.color && styleProps.color !== 'initial' && {\n  color: getTextColor(styleProps.color, theme.palette)\n}, styleProps.display !== 'initial' && {\n  display: styleProps.display\n}));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    align,\n    color,\n    display,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root', variant, `color${capitalize(color)}`, `align${capitalize(align)}`, `display${capitalize(display)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses({\n    slots,\n    classes,\n    getUtilityClass: getTypographyUtilityClass\n  });\n};\n\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n\n  const {\n    align = 'inherit',\n    className,\n    color = 'initial',\n    component,\n    display = 'initial',\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"align\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  const styleProps = _extends({}, props, {\n    align,\n    className,\n    color,\n    component,\n    display,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  });\n\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/React.createElement(TypographyRoot, _extends({\n    as: Component,\n    ref: ref,\n    styleProps: styleProps,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'initial'\n   */\n  color: PropTypes.oneOf(['error', 'inherit', 'initial', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   * @default 'initial'\n   */\n  display: PropTypes.oneOf(['block', 'initial', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default Typography;","map":{"version":3,"sources":["/home/gaurav/Documents/Study2021/airbnb-clone/node_modules/@material-ui/core/Typography/Typography.js"],"names":["_objectWithoutPropertiesLoose","_extends","React","PropTypes","clsx","deepmerge","unstable_composeClasses","composeClasses","experimentalStyled","useThemeProps","capitalize","getTypographyUtilityClass","getTextColor","color","palette","indexOf","text","split","pop","toLowerCase","main","overridesResolver","props","styles","styleProps","root","variant","align","display","noWrap","gutterBottom","paragraph","TypographyRoot","name","slot","theme","margin","typography","textAlign","overflow","textOverflow","whiteSpace","marginBottom","defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","inherit","useUtilityClasses","classes","slots","getUtilityClass","Typography","forwardRef","inProps","ref","className","component","variantMapping","other","Component","createElement","as","process","env","NODE_ENV","propTypes","oneOf","children","node","object","string","elementType","bool","sx","oneOfType"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport { getTypographyUtilityClass } from './typographyClasses';\n\nconst getTextColor = (color, palette) => {\n  if (color.indexOf('text') === 0) {\n    return palette.text[color.split('text').pop().toLowerCase()];\n  }\n\n  if (color === 'inherit' || color === 'initial') {\n    return color;\n  }\n\n  return palette[color].main;\n};\n\nconst overridesResolver = (props, styles) => {\n  const {\n    styleProps\n  } = props;\n  return deepmerge(styles.root || {}, _extends({}, styleProps.variant && styles[styleProps.variant], styleProps.color && styles[`color${capitalize(styleProps.color)}`], styleProps.align && styles[`align${capitalize(styleProps.align)}`], styleProps.display && styles[`display${capitalize(styleProps.display)}`], styleProps.noWrap && styles.noWrap, styleProps.gutterBottom && styles.gutterBottom, styleProps.paragraph && styles.paragraph));\n};\n\nexport const TypographyRoot = experimentalStyled('span', {}, {\n  name: 'MuiTypography',\n  slot: 'Root',\n  overridesResolver\n})(({\n  theme,\n  styleProps\n}) => _extends({\n  margin: 0\n}, styleProps.variant && theme.typography[styleProps.variant], styleProps.align !== 'inherit' && {\n  textAlign: styleProps.align\n}, styleProps.noWrap && {\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  whiteSpace: 'nowrap'\n}, styleProps.gutterBottom && {\n  marginBottom: '0.35em'\n}, styleProps.paragraph && {\n  marginBottom: 16\n}, styleProps.color && styleProps.color !== 'initial' && {\n  color: getTextColor(styleProps.color, theme.palette)\n}, styleProps.display !== 'initial' && {\n  display: styleProps.display\n}));\nconst defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\n\nconst useUtilityClasses = styleProps => {\n  const {\n    align,\n    color,\n    display,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    classes\n  } = styleProps;\n  const slots = {\n    root: ['root', variant, `color${capitalize(color)}`, `align${capitalize(align)}`, `display${capitalize(display)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']\n  };\n  return composeClasses({\n    slots,\n    classes,\n    getUtilityClass: getTypographyUtilityClass\n  });\n};\n\nconst Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTypography'\n  });\n\n  const {\n    align = 'inherit',\n    className,\n    color = 'initial',\n    component,\n    display = 'initial',\n    gutterBottom = false,\n    noWrap = false,\n    paragraph = false,\n    variant = 'body1',\n    variantMapping = defaultVariantMapping\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"align\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  const styleProps = _extends({}, props, {\n    align,\n    className,\n    color,\n    component,\n    display,\n    gutterBottom,\n    noWrap,\n    paragraph,\n    variant,\n    variantMapping\n  });\n\n  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  const classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/React.createElement(TypographyRoot, _extends({\n    as: Component,\n    ref: ref,\n    styleProps: styleProps,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'initial'\n   */\n  color: PropTypes.oneOf(['error', 'inherit', 'initial', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   * @default 'initial'\n   */\n  display: PropTypes.oneOf(['block', 'initial', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default Typography;"]},"metadata":{},"sourceType":"module"}